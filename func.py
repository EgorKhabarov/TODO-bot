from datetime import datetime, timedelta, timezone
from sqlite3 import connect, Error # pip3.10 install --user sqlite3
from calendar import monthcalendar
from urllib.parse import urlparse
from dataclasses import dataclass
from typing import Literal
from copy import deepcopy
from time import time
import re

from requests import get # pip install requests
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from lang import translation
import config


"""sql"""
def SQL(Query: str, params: tuple = (), commit: bool = False):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å
    –ü—Ä–æ–±–æ–≤–∞–ª —á–µ—Ä–µ–∑ with, –Ω–æ –æ–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª–æ —Ñ–∞–π–ª

    :param Query: –ó–∞–ø—Ä–æ—Å
    :param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    :param commit: –ù—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    """
    connection = connect(config.database_path)
    cursor = connection.cursor()
    try:
        cursor.execute(Query, params)
        if commit: connection.commit()
        result = cursor.fetchall()
    finally:
        connection.close()
    return result

class UserSettings:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    .user_id     ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    .lang        –Ø–∑—ã–∫
    .sub_urls    –°–æ–∫—Ä–∞—â–∞—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∏
    .city        –ì–æ—Ä–æ–¥
    .timezone    –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    .direction   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    .user_status –û–±—ã—á–Ω—ã–π, –ü—Ä–µ–º–∏—É–º, –ê–¥–º–∏–Ω (0, 1, 2)

    –§—É–Ω–∫—Ü–∏–∏
    .get_user_settings()
    """
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.lang, self.sub_urls, self.city, self.timezone, self.direction, self.user_status = self.get_user_settings()

    def get_user_settings(self):
        query = f"""SELECT lang, sub_urls, city, timezone, direction, user_status FROM settings WHERE user_id={self.user_id};"""
        try:
            return SQL(query)[0]
        except (Error, IndexError):
            print("–î–æ–±–∞–≤–ª—è—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            SQL(f"INSERT INTO settings (user_id) VALUES ({self.user_id});", commit=True)
        return SQL(query)[0]

    def get_settings_markup(self):
        """
        –°—Ç–∞–≤–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è chat_id
        """
        not_lang = "ru" if self.lang == "en" else "en"
        not_sub_urls = 1 if self.sub_urls == 0 else 0
        not_direction = "‚¨áÔ∏è" if self.direction == "‚¨ÜÔ∏è" else "‚¨ÜÔ∏è"

        utz = self.timezone
        time_zone_dict = {}
        time_zone_dict.__setitem__(*('‚Äπ‚Äπ‚Äπ', f'settings timezone {utz - 1}') if utz > -11 else ('   ', 'None'))
        time_zone_dict[f'{utz}'] = 'settings timezone 3'
        time_zone_dict.__setitem__(*('‚Ä∫‚Ä∫‚Ä∫', f'settings timezone {utz + 1}') if utz < 11 else ('   ', 'None'))

        markup = generate_buttons([{f"üó£ {self.lang}": f"settings lang {not_lang}",
                                    f"üîó {bool(self.sub_urls)}": f"settings sub_urls {not_sub_urls}",
                                    f"‚ÜïÔ∏è": f"settings direction {not_direction}"},
                                   time_zone_dict,
                                   {"‚úñ": "message_del"}])
        return self.lang, self.sub_urls, self.city, utz, self.direction, markup

def create_tables() -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    """
    try:
        SQL("""SELECT * FROM root LIMIT 1""")
    except Error as e:
        if str(e) == "no such table: root":
            SQL("""
                CREATE TABLE root (
                    event_id  INTEGER,
                    user_id   INT,
                    date      TEXT,
                    text      TEXT,
                    isdel     INTEGER DEFAULT (0),
                    status    TEXT    DEFAULT ‚¨úÔ∏è
                );""", commit=True)

    try:
        SQL("""SELECT * FROM settings LIMIT 1""")
    except Error as e:
        if str(e) == "no such table: settings":
            SQL("""
                CREATE TABLE settings (
                    user_id           INT  NOT NULL UNIQUE ON CONFLICT ROLLBACK,
                    lang              TEXT DEFAULT ru,
                    sub_urls          INT  DEFAULT (1),
                    city              TEXT DEFAULT –ú–æ—Å–∫–≤–∞,
                    timezone          INT  DEFAULT (3),
                    direction         TEXT DEFAULT ‚¨áÔ∏è,
                    user_status       INT  DEFAULT (0),
                    user_max_event_id INT  DEFAULT (1)
                );""", commit=True)
create_tables()

def create_event(user_id: int, date: str, text: str) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    try:
        SQL(f"""
            INSERT INTO root(event_id, user_id, date, text)
            VALUES(
              COALESCE((SELECT user_max_event_id FROM settings WHERE user_id = {user_id}), 1),
              {user_id}, '{date}', '{text}'
            );""", commit=True)
        SQL(f"""
            UPDATE settings
            SET user_max_event_id = user_max_event_id + 1
            WHERE user_id = {user_id};""", commit=True)
        return True
    except Error as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ create_event: '{e}'  arg: {user_id=}, {date=}, {text=}")
        return False

def get_values(column_to_limit: str, column_to_order: str, WHERE: str, table: str, MAXLEN: int = 3500, MAXEVENTCOUNT: int = 10, direction: Literal["ASC", "DESC"] = "DESC"):
    """
    :param table:           –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    :param column_to_limit: –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    :param column_to_order: –°—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä id)
    :param WHERE:           –£—Å–ª–æ–≤–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    :param MAXLEN:          –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    :param MAXEVENTCOUNT:   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    :param direction:       –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫ ("ASC" or "DESC")
    """
    column = "end_id" if direction == "DESC" else "start_id"
    Query = f"""
WITH numbered_table AS (
  SELECT ROW_NUMBER() OVER (ORDER BY {column_to_order} {direction}) AS row_num, {column_to_order} AS order_column, LENGTH({column_to_limit}) as len
  FROM {table}
  WHERE {WHERE}
),
temp_table AS (
  SELECT numbered_table.row_num, numbered_table.order_column, numbered_table.len,
    numbered_table.order_column AS {column}, numbered_table.len AS sum_len,
    1 AS group_id, 1 AS event_count
  FROM numbered_table WHERE numbered_table.row_num = 1
  UNION ALL
  SELECT
    numbered_table.row_num, numbered_table.order_column, numbered_table.len,
    CASE WHEN temp_table.sum_len + numbered_table.len <= {MAXLEN} AND temp_table.event_count < {MAXEVENTCOUNT} THEN temp_table.{column}                     ELSE numbered_table.order_column END AS {column},
    CASE WHEN temp_table.sum_len + numbered_table.len <= {MAXLEN} AND temp_table.event_count < {MAXEVENTCOUNT} THEN temp_table.sum_len + numbered_table.len ELSE numbered_table.len          END AS sum_len,
    CASE WHEN temp_table.sum_len + numbered_table.len <= {MAXLEN} AND temp_table.event_count < {MAXEVENTCOUNT} THEN temp_table.group_id                     ELSE temp_table.group_id + 1     END AS group_id,
    CASE WHEN temp_table.sum_len + numbered_table.len <= {MAXLEN} AND temp_table.event_count < {MAXEVENTCOUNT} THEN temp_table.event_count + 1              ELSE 1                           END AS event_count
  FROM numbered_table JOIN temp_table ON numbered_table.row_num = temp_table.row_num + 1
)
SELECT GROUP_CONCAT(COALESCE(numbered_table.order_column, ''), ',') AS ids -- , SUM(numbered_table.len) AS sum_len
FROM numbered_table
JOIN temp_table ON numbered_table.row_num = temp_table.row_num
GROUP BY temp_table.group_id;
"""
    data = SQL(Query)
    return data

def check_bells(settings: UserSettings, chat_id): # TODO –¥–æ–¥–µ–ª–∞—Ç—å check_bells
    date = now_time_strftime(settings)
    res = SQL(f"""SELECT event_id, user_id, text, status FROM root
               WHERE ((date = '{date}' AND status = '‚è∞')
               OR (substr(date, 7, 4) || '-' || substr(date, 4, 2) || '-' || substr(date, 1, 2) 
                   BETWEEN DATE('now') AND DATE('now', '+7 day') AND (status = 'üéâ' OR status = 'üéä'))) 
               AND isdel = 0 AND user_id = {chat_id}""")
    alarm, holiday = get_translate("alarm", settings.lang)
    for event in res:
        event_id, user_id, text, status = event
        if status == '‚è∞':
            text = f'{alarm}\n<b>{event_id}.</b>üîï\n{text}'
        if status in ('üéâ', 'üéä'):
            text = f'{holiday}\n<b>{event_id}.</b>{status} {day_info(settings, date)}\n{text}'
        try:
            SQL(f"UPDATE root SET status = 'üîï' WHERE user_id = {chat_id} AND event_id = {event_id} AND date = '{date}' AND status = '‚è∞';", commit=True)
        except Error as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check_bells: '{e}'")
        return text


"""time"""
def now_time(settings: UserSettings):
    return datetime.now()+timedelta(hours=settings.timezone)

def now_time_strftime(settings: UserSettings):
    return now_time(settings).strftime("%d.%m.%Y")

def log_time_strftime(log_timezone: int = config.hours_difference):
    return (datetime.now()+timedelta(hours=log_timezone)).strftime("%Y.%m.%d %H:%M:%S")

def new_time_calendar(settings: UserSettings):
    date = now_time(settings)
    return [date.year, date.month]

def year_info(settings: UserSettings, year):
    result = ""
    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
        result += get_translate("leap", settings.lang)
    else:
        result += get_translate("not_leap", settings.lang)
    result += ' '
    result += ("üêÄ", "üêÇ", "üêÖ", "üêá", "üê≤", "üêç", "üê¥", "üêê", "üêí", "üêì", "üêï", "üêñ")[(year - 4) % 12]
    return result

def get_week_number(YY, MM, DD): # TODO –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏
    return datetime(YY, MM, DD).isocalendar()[1]

class day_info:
    def __init__(self, settings, date):
        today, tomorrow, day_after_tomorrow, yesterday, day_before_yesterday, after, ago, Fday = get_translate("relative_date_list", settings.lang)
        x = now_time(settings)
        x = datetime(x.year, x.month, x.day)
        y = datetime(*[int(x) for x in date.split('.')][::-1])

        day_diff = (y - x).days
        if day_diff == 0: day_diff = f'{today}'
        elif day_diff == 1: day_diff = f'{tomorrow}'
        elif day_diff == 2: day_diff = f'{day_after_tomorrow}'
        elif day_diff == -1: day_diff = f'{yesterday}'
        elif day_diff == -2: day_diff = f'{day_before_yesterday}'
        elif day_diff > 2: day_diff = f'{after} {day_diff} {Fday(day_diff)}'
        else: day_diff = f'{-day_diff} {Fday(day_diff)} {ago}'

        week_days = get_translate("week_days_list_full", settings.lang)
        month_list = get_translate("months_name2", settings.lang)

        self.date = date
        self.str_date = f"{y.day} {month_list[y.month - 1]}"
        self.week_date = week_days[y.weekday()]
        self.relatively_date = day_diff


"""weather"""
def cache_decorator(cache_time_sec: int = 32):
    """
    –ö–µ—à–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞
    –Ω–µ –¥–∞—ë—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —á–∞—â–µ —á–µ–º –≤ 32 —Å–µ–∫—É–Ω–¥—ã
    """
    def decorator(func):
        cache = {}

        def wrapper(settings: UserSettings, city: str):
            key = f"{city}"
            now = time()
            if key not in cache or now - cache[key][1] > cache_time_sec:
                cache[key] = (func(settings, city), now)
            return cache[key][0]

        return wrapper

    return decorator

@cache_decorator(60)
def weather_in(settings: UserSettings, city: str): # TODO –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º –∞—Ç–∞–∫
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –≥–æ—Ä–æ–¥—É city
    """
    print(f"weather in {city}")
    url = 'http://api.openweathermap.org/data/2.5/weather'
    weather = get(url, params={'APPID': config.weather_api_key, 'q': city, 'units': 'metric', 'lang': settings.lang}).json()
    weather_icon = weather['weather'][0]['icon']
    dn = {"d": "‚òÄ", "n": "üåë"}
    we = {"01": "", "02": "üå§", "03": "üå•", "04": "‚òÅ", "09": "üå®", "10": "üåß", "11": "‚õà", "13": "‚ùÑ", "50": "üå´"}
    de = {0: "‚¨ÜÔ∏è", 45: "‚ÜóÔ∏è", 90: "‚û°Ô∏è", 135: "‚ÜòÔ∏è", 180: "‚¨áÔ∏è", 225: "‚ÜôÔ∏è", 270: "‚¨ÖÔ∏è", 315: "‚ÜñÔ∏è"}

    try:
        weather_icon = dn[weather_icon[-1]] + we[weather_icon[:2]]
    except KeyError:
        weather_icon = weather['weather'][0]['main']

    delta = timedelta(hours=weather["timezone"]//60//60)
    city_name = weather["name"].capitalize()
    weather_description = weather['weather'][0]['description'].capitalize().replace(' ', "\u00A0")
    time_in_city = f'{datetime.now(timezone.utc)+delta}'.replace('-', '.')[:-13]
    weather_time = f'{datetime.utcfromtimestamp(weather["dt"])+delta}'.replace('-', '.')
    temp = int(weather['main']['temp'])
    feels_like = int(weather['main']['feels_like'])
    wind_speed = f"{weather['wind']['speed']:.1f}"
    wind_deg = weather['wind']['deg']
    wind_deg_icon = de[0 if (d := round(int(wind_deg)/45)*45) == 360 else d]
    sunrise = f'{datetime.utcfromtimestamp(weather["sys"]["sunrise"])+delta}'.split(' ')[-1]
    sunset = f'{datetime.utcfromtimestamp(weather["sys"]["sunset"])+delta}'.split(' ')[-1]
    visibility = weather['visibility']

    return get_translate("weather", settings.lang).format(city_name, weather_icon, weather_description,
                                                          time_in_city, weather_time,
                                                          temp, feels_like,
                                                          wind_speed, wind_deg_icon,  wind_deg,
                                                          sunrise, sunset, visibility)

@cache_decorator(3600)
def forecast_in(settings: UserSettings, city: str):
    print(f"forecast in {city}")
    url = "http://api.openweathermap.org/data/2.5/forecast"
    weather = get(url, params={'APPID': config.weather_api_key, 'q': city, 'units': 'metric', 'lang': settings.lang}).json()
    dn = {"d": "‚òÄ", "n": "üåë"}
    we = {"01": "", "02": "üå§", "03": "üå•", "04": "‚òÅ", "09": "üå®", "10": "üåß", "11": "‚õà", "13": "‚ùÑ", "50": "üå´"}
    de = {0: "‚¨ÜÔ∏è", 45: "‚ÜóÔ∏è", 90: "‚û°Ô∏è", 135: "‚ÜòÔ∏è", 180: "‚¨áÔ∏è", 225: "‚ÜôÔ∏è", 270: "‚¨ÖÔ∏è", 315: "‚ÜñÔ∏è"}

    citytimezone = timedelta(hours=weather['city']['timezone']//60//60)
    sunrise = f"{datetime.utcfromtimestamp(weather['city']['sunrise'])+citytimezone}".split(' ')[-1]
    sunset = f"{datetime.utcfromtimestamp(weather['city']['sunset'])+citytimezone}".split(' ')[-1]
    result = f"{weather['city']['name']}\n‚òÄ {sunrise}\nüåë {sunset}"
    for hour in weather["list"]:
        weather_icon = hour['weather'][0]['icon']

        try:
            weather_icon = dn[weather_icon[-1]] + we[weather_icon[:2]]
        except KeyError:
            weather_icon = hour['weather'][0]['main']

        weather_description = hour['weather'][0]['description'].capitalize().replace(' ', "\u00A0")
        temp = hour['main']['temp']
        wind_speed = hour['wind']['speed']
        wind_deg = hour['wind']['deg']
        wind_deg_icon = de[0 if (d := round(int(wind_deg) / 45) * 45) == 360 else d]
        city_time = hour['dt_txt'].replace('-', '.')[:-3]
        date = ".".join(city_time.split()[0].split('.')[::-1])
        if date not in result:
            result += f"\n\n<b>{date}</b> {day_info(settings, date)}"
        result += f"\n{city_time.split()[-1]} {weather_icon}<b>{temp:‚†Ä>2.0f}¬∞C üí®{wind_speed:.0f}–º/—Å {wind_deg_icon}</b> <u>{weather_description}</u>."
    return result


"""buttons"""
def generate_buttons(buttons_data):
    keyboard = [[InlineKeyboardButton(text, callback_data=data) for text, data in row.items()] for row in buttons_data]
    return InlineKeyboardMarkup(keyboard)

def mycalendar(settings: UserSettings, YY_MM, chat_id) -> InlineKeyboardMarkup():
    """–°–æ–∑–¥–∞—ë—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏"""
    YY, MM = YY_MM
    markup = InlineKeyboardMarkup()
    #  December (12.2022)
    # –ü–Ω –í—Ç –°—Ä –ß—Ç –ü—Ç –°–± –í—Å
    markup.row(InlineKeyboardButton(f"{get_translate('months_name', settings.lang)[MM-1]} ({MM}.{YY}) ({year_info(settings, YY)})",
                                    callback_data=f"generate_month_calendar {YY}"))
    week_day_list = get_translate("week_days_list", settings.lang)
    markup.row(*[InlineKeyboardButton(day, callback_data="None") for day in week_day_list])

    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–Ω–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏–µ
    SqlResult = SQL(f'SELECT DISTINCT CAST(SUBSTR(date, 1, 2) as date) FROM root '
                    f'WHERE user_id = {chat_id} AND date LIKE "%.{MM:0>2}.{YY}" AND isdel = 0;') # SUBSTRING(date, 1, 2)
    beupdate = [x[0] for x in SqlResult]

    birthday = SQL(f'SELECT DISTINCT CAST(SUBSTR(date, 1, 2) as date) FROM root '
                   f'WHERE date LIKE "__.{MM:0>2}.{YY}" AND isdel = 0 AND '
                   f'user_id = {chat_id} AND status IN ("üéâ", "üéä")')
    birthdaylist = [x[0] for x in birthday]

    # –ø–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á–∏—Å–ª–æ
    today = now_time(settings).day
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π
    for weekcalendar in monthcalendar(YY, MM):
        weekbuttons = []
        for day in weekcalendar:
            if day == 0:
                weekbuttons.append(InlineKeyboardButton("  ", callback_data="None"))
            else:
                tag_today = '#' if day == today else ''
                tag_event = '*' if day in beupdate else ''
                tag_birthday = '!' if day in birthdaylist else ''
                weekbuttons.append(InlineKeyboardButton(f"{tag_today}{day}{tag_event}{tag_birthday}", callback_data=f"{f'0{day}' if len(str(day)) == 1 else day}.{f'0{MM}' if len(str(MM)) == 1 else MM}.{YY}"))
        markup.row(*weekbuttons)
    markup.row(*[InlineKeyboardButton(f"{day}", callback_data=f"{day}") for day in ('<<', '<', '‚ü≥', '>', '>>')])
    return markup

def generate_month_calendar(settings: UserSettings, chat_id, YY) -> InlineKeyboardMarkup():
    """–°–æ–∑–¥–∞—ë—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –≥–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏"""
    SqlResult = SQL(f'SELECT DISTINCT CAST(SUBSTR(date, 4, 2) as date) FROM root '
                    f'WHERE user_id = {chat_id} AND date LIKE "__.__.{YY}" AND isdel = 0;')
    month_list = [x[0] for x in SqlResult] # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    nowMonth = now_time(settings).month
    isNowMonth = lambda numM: numM == nowMonth

    months = get_translate("months_list", settings.lang)

    result = []
    for row in months:
        result.append({})
        for nameM, numm in row:
            tag_today = "#" if isNowMonth(numm) else ""
            tag_event = "*" if numm in month_list else ""
            tag_birthday = '!' if SQL(f'SELECT status FROM root WHERE date LIKE "__.{numm:0>2}.{YY}" AND isdel = 0 AND user_id = {chat_id} AND status IN ("üéâ", "üéä") LIMIT 1') else ''
            result[-1][f'{tag_today}{nameM}{tag_event}{tag_birthday}'] = f'generate_calendar {YY} {numm}'

    markupL = [
        {f"{YY} ({year_info(settings, YY)})": "None"},
        *result,
        {"<<": f"generate_month_calendar {YY-1}", "‚ü≥": "year now", ">>": f"generate_month_calendar {YY+1}"}
    ]
    markup = generate_buttons(markupL)
    return markup

allmarkup = generate_buttons([
    {"‚ûï": "event_add", "üìù": "event_edit", "üö©": "event_status", "üóë": "event_del"}, # "üîò": "menu"
    {"üîô": "back", "<": "<<<", ">": ">>>", "‚úñ": "message_del"}])
minimarkup = generate_buttons([{"üîô": "back", "‚úñ": "message_del"}])
backmarkup = generate_buttons([{"üîô": "back"}])
delmarkup = generate_buttons([{"‚úñ": "message_del"}])
databasemarkup = generate_buttons([{'–ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö': 'set database'}])


"""–î—Ä—É–≥–æ–µ"""
callbackTab = '‚†Ä‚†Ä‚†Ä'

def ToHTML(text):
    return text.replace("<", '&lt;').replace(">", '&gt;').replace("'", '&#39;').replace('"', '&quot;')

def NoHTML(text):
    return text.replace("&lt;", '<').replace("&gt;", '>').replace("&#39;", "'").replace('&quot;', '"')

def markdown(text: str, status: str, suburl=False) -> str:
    """–î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∫ —Å–æ–±—ã—Ç–∏—é –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    def OrderList(_text: str, n=0) -> str: # –ù—É–º–µ—Ä—É–µ—Ç –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ—á–∫—É
        lst = _text.splitlines()
        width = len(str(len(lst))) # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç—Å—Ç—É–ø–∞ —á—Ç–æ–±—ã –Ω–µ —Å—ä–µ–∑–∂–∞–ª–æ
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ —á–∏—Å–ª–∞ + —Ç–µ–∫—Å—Ç, –∞ –µ—Å–ª–∏ –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ —Ç–æ "‚†Ä"
        return "\n".join(("0Ô∏è‚É£" * (width-len(str(n := n+1)))) + "‚É£".join(str(n)) + "‚É£" + t if t not in ("", "‚†Ä") else "‚†Ä" for t in lst)

    def List(_text: str): # –ó–∞–º–µ–Ω—è–µ—Ç \n –Ω–∞ :black_small_square: (—ç–º–æ–¥–∑–∏ Telegram)
        return "‚ñ™Ô∏è" + _text.replace("\n", "\n‚ñ™Ô∏è").replace("\n‚ñ™Ô∏è‚†Ä\n", "\n‚†Ä\n")

    def Spoiler(_text: str):
        return f'<span class="tg-spoiler">{_text}</span>'

    def SubUrls(_text: str):
        la = lambda url: f'<a href="{url[0]}">{urlparse(url[0]).netloc}</a>'
        return re.sub(r'(http?s?://\S+)', la, _text)

    def Code(_text: str):
        return f'<code>{_text}</code>'

    text = text.replace('\n\n', '\n‚†Ä\n')
    if suburl and status not in ('üíª', ):
        text = SubUrls(text)
    if status == 'üßÆ':
        return OrderList(text)
    elif status == 'üíª':
        return Code(text)
    elif status == 'üóí':
        return List(text)
    elif status == 'ü™û':
        return Spoiler(text)
    else: return text

def get_translate(target: str, lang_iso_code: str) -> str:
    try:
        return translation[target][lang_iso_code]
    except KeyError:
        return translation[target]["en"]

class Cooldown:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
    MyCooldown = Cooldown(cooldown_time, {})
    MyCooldown.check(chat_id)
    """
    def __init__(self, cooldown_time_sec: int, cooldown_dict: dict):
        self.cooldown_time_sec = cooldown_time_sec
        self.cooldown_dict = cooldown_dict

    def check(self, key, update_dict=True):
        """
        :param key: –ö–ª—é—á –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–ª–æ–≤–∞—Ä—å
        :param update_dict: –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
        –ï—Å–ª–∏ True —Ç–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º—è –±—É–¥–µ—Ç –æ–±–Ω—É–ª—è—Ç—å—Å—è
        :return: (bool, int(time_difference))
        """
        t1 = time()
        result = True, 0
        try:
            if (localtime := (t1 - self.cooldown_dict[str(key)])) < self.cooldown_time_sec:
                result = False, int(self.cooldown_time_sec - int(localtime))
        except Exception as e:
            print(f'Cooldown.check {e}')
        if update_dict or result[0]:
            self.cooldown_dict[f'{key}'] = t1
        return result
CSVCooldown = Cooldown(1800, {})

def main_log(settings: UserSettings, chat_id: int, text: str, action: str):
    log_chat_id = (f"\033[21m{chat_id}\033[0m" if settings.user_status == 0
                   else (f"\033[21m\033[32m{chat_id}\033[0m" if settings.user_status == 1
                         else f"\033[21m\033[34m{chat_id}\033[0m"))
    print(f'{log_time_strftime()} {log_chat_id.ljust(15)} {action} {text.replace(f"{chr(92)}n", f"{chr(92)}{chr(92)}n")}')  # {chr(92)} = \ (escape sequences)


"""–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
@dataclass()
class Event:
    """
    date: str
    event_id: int
    status: str
    text: str
    """
    date: str = "now"
    event_id: int = 0
    status: str = ""
    text: str = ""

class MyMessage:
    def __init__(self, settings: UserSettings, date: str = "now", event_list: tuple | list[Event, ...] = tuple(), reply_markup: InlineKeyboardMarkup = InlineKeyboardMarkup()):
        if date == "now":
            date = now_time_strftime(settings)
        self._event_list = event_list
        self._date = date
        self._settings = settings
        self.text = ""
        self.reply_markup = deepcopy(reply_markup)

    def get_data(self, *, column_to_limit: str = "text", column_to_order: str = "event_id", WHERE: str, table: str = "root", MAXLEN: int = 2500, MAXEVENTCOUNT: int = 10, direction: Literal["ASC", "DESC"] = "DESC"):
        data = get_values(column_to_limit, column_to_order, WHERE, table, MAXLEN, MAXEVENTCOUNT, direction)
        if data:
            if table == "root":
                first_message = [Event(*event) for event in SQL(f'SELECT date, event_id, status, text FROM root WHERE ({WHERE}) AND event_id IN ({data[0][0]});')]
            else:
                first_message = [Event(text=event[0]) for event in SQL(f'SELECT {column_to_limit} FROM {table} WHERE ({WHERE}) AND {column_to_order} IN ({data[0][0]});')]

            if self._settings.direction != "‚¨ÜÔ∏è":
                first_message = first_message[::-1]
            self._event_list = first_message


            diapason_list = []
            for n, data in enumerate(data):  # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
                if int(f'{n}'[-1]) in (0, 5):  # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤ —Å—Ç—Ä–æ—á–∫–∏ –ø–æ 5
                    diapason_list.append([])
                diapason_list[-1].append((n + 1, data[0]))  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞—á–∞–ª—å–Ω–æ–µ id, –∫–æ–Ω–µ—á–Ω–æ–µ id

            if len(diapason_list[0]) != 1:  # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
                for i in range(5 - len(diapason_list[-1])):  # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥—É –¥–æ 5
                    diapason_list[-1].append((0, 0))

                [self.reply_markup.row(*[
                    InlineKeyboardButton(f'{numpage}', callback_data=f'|{vals}') if vals else
                    InlineKeyboardButton(f' ', callback_data=f'None') for numpage, vals in row]) for row in diapason_list[:8]]
                # –û–±—Ä–∞–∑–∞–µ–º –¥–æ 8 —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏

        return self

    def get_events(self, WHERE: str, values: list | tuple):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å —É—Å–ª–æ–≤–∏–µ–º WHERE"""
        try:
            res = [Event(*event) for event in SQL(f"SELECT date, event_id, status, text FROM root WHERE {WHERE} AND event_id IN ({', '.join(values)});")]
        except Error as e:
            print(f'–û—à–∏–±–∫–∞ –≤ get_text_in_diapason: {e}')
            self._event_list = []
        else:
            if self._settings.direction == "‚¨ÜÔ∏è":
                self._event_list = res
            else:
                self._event_list = res[::-1]
        return self

    def format(self, title: str = "{date} <u><i>{strdate}  {weekday}</i></u> ({reldate})\n", args: str = "<b>{numd}.{event_id}.</b>{status}\n{markdown_text}\n", ending: str = "", if_empty: str = "üï∏üï∑  üï∏"):
        """
        –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É
        \n ‚†Ä
        \n {date}     - Date                                                                       ["0000.00.00"]
        \n {strdate}  - String Date                                                                ["0 January"]
        \n {weekday} - Week Date                                                                   ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"]
        \n {reldate}  - Relatively Date                                                            ["–ó–∞–≤—Ç—Ä–∞"]
        \n ‚†Ä
        \n {numd}     - –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (—Ü–∏—Ñ–µ—Ä–Ω—ã–π)                                                ["1 2 3"]
        \n {nums}     - –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (—Å–º–∞–π–ª–∏–∫–∏)                                                ["1 2 3"]
        \n {event_id} - Event_id                                                                   ["1"]
        \n {status}   - Status                                                                     ["‚¨úÔ∏è"]
        \n {markdown_text} - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –Ω—É–∂–Ω—ã–π —Ç–µ–≥ –ø–æ —Å—Ç–∞—Ç—É—Å—É                             ["<b>"]
        \n {markdown_text_nourlsub} - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –Ω—É–∂–Ω—ã–π —Ç–µ–≥ –ø–æ —Å—Ç–∞—Ç—É—Å—É –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è url ["</b>"]
        \n {text}     - Text                                                                       ["text"]

        :param title:    –ó–∞–≥–æ–ª–æ–≤–æ–∫
        :param args:     –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —à–∞–±–ª–æ–Ω
        :param ending:   –ö–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è
        :param if_empty: –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø—É—Å—Ç–æ–π
        :return:         message.text
        """
        day = day_info(self._settings, self._date)

        format_string = title.format(
            date=day.date,
            strdate=day.str_date,
            weekday=day.week_date,
            reldate=day.relatively_date) + "\n"

        if not self._event_list:
            format_string += if_empty
        else:
            for n, event in enumerate(self._event_list):
                day = day_info(self._settings, event.date)
                format_string += args.format(
                    date=day.date,
                    strdate=day.str_date,
                    weekday=day.week_date,
                    reldate=day.relatively_date,
                    numd=f"{n + 1}",
                    nums=f"{n + 1}Ô∏è‚É£",  # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞ —Å —Ü–∏—Ñ—Ä–æ–π
                    event_id=f"{event.event_id}",
                    status=event.status,
                    markdown_text=markdown(event.text, event.status, self._settings.sub_urls),
                    markdown_text_nourlsub=markdown(event.text, event.status),
                    text=event.text
                ) + "\n"

        self.text = format_string+ending
        return self

def search(settings: UserSettings, chat_id: int, query: str, id_list: list | tuple = tuple()):
    if not re.match(r'\S', query):
        text = get_translate("request_empty", settings.lang)
        return text, delmarkup

    querylst = query.replace('\n', ' ').split()
    splitquery = " OR ".join(f"date LIKE '%{x}%' OR text LIKE '%{x}%'OR status LIKE '%{x}%' OR event_id LIKE '%{x}%'" for x in querylst)
    WHERE = f"""(user_id = {chat_id} AND isdel == 0) AND ({splitquery})"""

    generated = MyMessage(settings, reply_markup=delmarkup)
    if id_list:
        generated.get_events(WHERE=WHERE, values=id_list)
    else:
        generated.get_data(WHERE=WHERE, direction={"‚¨áÔ∏è": "DESC", "‚¨ÜÔ∏è": "ASC"}[settings.direction])
    generated.format(title=f'{get_translate("search", settings.lang)} {query}:\n',
                     args="<b>{numd}.{event_id}.</b>{status} <u><i>{strdate}  {weekday}</i></u> ({reldate})\n{markdown_text}\n",
                     if_empty=get_translate("nothing_found", settings.lang))

    return generated

def week_event_list(settings: UserSettings, chat_id, id_list: list | tuple = tuple()):
    WHERE = f"""(user_id = {chat_id} AND isdel = 0)
                AND (substr(date, 7, 4) || '-' || substr(date, 4, 2) || '-' || substr(date, 1, 2) 
                BETWEEN DATE('now') AND DATE('now', '+7 day'))"""
    generated = MyMessage(settings, reply_markup=delmarkup)
    if id_list:
        generated.get_events(WHERE=WHERE, values=id_list)
    else:
        generated.get_data(WHERE=WHERE, direction="ASC")
    generated.format(title=f'{get_translate("week_events", settings.lang)}\n',
                     args="<b>{date}.{event_id}.</b>{status} <u><i>{strdate}  {weekday}</i></u> ({reldate})\n{markdown_text}\n",
                     if_empty=get_translate("nothing_found", settings.lang))
    return generated

def deleted(settings: UserSettings, chat_id, id_list: list | tuple = tuple()):
    WHERE = f"""user_id = {chat_id} AND isdel != 0"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—à–µ MAXTIME –¥–Ω—è
    SQL(f"""DELETE FROM root WHERE isdel != 0 AND user_id = {chat_id} AND julianday('now') - 
    julianday(substr(date, 7, 4) || '-' || substr(date, 4, 2) || '-' || substr(date, 1, 2)) > {7};""", commit=True)

    generated = MyMessage(settings, reply_markup=delmarkup)
    if id_list:
        generated.get_events(WHERE=WHERE, values=id_list)
    else:
        generated.get_data(WHERE=WHERE, direction={"‚¨áÔ∏è": "DESC", "‚¨ÜÔ∏è": "ASC"}[settings.direction])
    generated.format(title=f'{get_translate("basket", settings.lang)}\n',
                     args="<b>{date}.{event_id}.</b>{status} <u><i>{strdate}  {weekday}</i></u> ({reldate})\n{markdown_text}\n",
                     if_empty=get_translate("message_empty", settings.lang))
    return generated

def today_message(settings: UserSettings, chat_id, date: str, id_list: list | tuple = tuple()):
    WHERE = f"user_id = {chat_id} AND isdel = 0 AND date = '{date}'"
    generated = MyMessage(settings, date=date, reply_markup=allmarkup)
    if id_list:
        generated.get_events(WHERE=WHERE, values=id_list)
    else:
        generated.get_data(WHERE=WHERE, direction={"‚¨áÔ∏è": "DESC", "‚¨ÜÔ∏è": "ASC"}[settings.direction])
    generated.format(title="{date} <u><i>{strdate}  {weekday}</i></u> ({reldate})\n",
                     args="<b>{numd}.{event_id}.</b>{status}\n{markdown_text}\n",
                     if_empty=get_translate("nodata", settings.lang))
    return generated

"""–ü—Ä–æ–≤–µ—Ä–∫–∏"""
limits = {
    "normal": (4000, 20),
    "premium": (8000, 40),
    "admin": (999999, 999)
}

def is_exceeded_limit(chat_id: int, date: str, limit: tuple[int, int] = (4000, 20), difference: tuple[int, int] = (0, 0)) -> bool:
    """True –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç"""
    user_limit = SQL(f"""SELECT IFNULL(SUM(LENGTH(text)), 0), IFNULL(COUNT(date), 0) FROM root WHERE user_id={chat_id} AND date='{date}' AND isdel=0;""")[0]
    res = (user_limit[0] + difference[0]) >= limit[0] or (user_limit[1] + difference[1]) >= limit[1]
    return res

def is_admin_id(chat_id):
    return chat_id in config.admin_id
