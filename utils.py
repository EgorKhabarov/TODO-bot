import re
from time import time
from io import StringIO
from typing import Any, Literal
from urllib.parse import urlparse
from textwrap import wrap as textwrap
from datetime import timedelta, datetime, timezone

import requests
from requests import ConnectionError
from requests.exceptions import MissingSchema
from telebot.types import Message, CallbackQuery

import config
import logging
from lang import get_translate
from time_utils import DayInfo
from todoapi.api import User
from todoapi.utils import is_admin_id
from todoapi.types import db, UserSettings


def to_html_escaping(text: str) -> str:
    return (
        text.replace("<", "&lt;")
        .replace(">", "&gt;")
        .replace("'", "&#39;")
        .replace('"', "&quot;")
    )


def remove_html_escaping(text: str) -> str:
    return (
        text.replace("&lt;", "<")
        .replace("&gt;", ">")
        .replace("&#39;", "'")
        .replace("&quot;", '"')
    )


def html_to_markdown(html_text: str) -> str:
    for (k1, k2), v in {
        ("<i>", "</i>"): "__",
        ("<b>", "</b>"): "**",
        ("<s>", "</s>"): "~~",
        ("<pre>", "</pre>"): "```",
        ("<code>", "</code>"): "`",
        ('<span class="tg-spoiler">', "</span>"): "||",
    }.items():
        html_text = html_text.replace(k1, v).replace(k2, v)

    def prepare_url(url):
        url = url.removeprefix("http://").removeprefix("https://")
        url = url.strip().strip("/").strip("\\")
        return f"https://{url}"

    html_text = re.sub(
        r"<a href=\"(.+?)\">(\S+?)(\n??)</a>",
        lambda x: " {url} ({text}) {n}".format(  #
            url=prepare_url(x.group(1)),
            text=x.group(2).strip(),
            n=x.group(3),
        ),
        html_text,
    )
    return html_text


def markdown(text: str, statuses: str, sub_url: bool | int = False) -> str:
    """
    –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∫ —Å–æ–±—ã—Ç–∏—é –ø–æ —Å—Ç–∞—Ç—É—Å—É
    """

    def OrderList(_text: str, num=0) -> str:  # –ù—É–º–µ—Ä—É–µ—Ç –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ—á–∫—É
        lst = _text.splitlines()
        width = len(str(len(lst)))  # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç—Å—Ç—É–ø–∞ —á—Ç–æ–±—ã –Ω–µ —Å—ä–µ–∑–∂–∞–ª–æ
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ —á–∏—Å–ª–∞ + —Ç–µ–∫—Å—Ç, –∞ –µ—Å–ª–∏ –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ —Ç–æ "‚†Ä"
        return "\n".join(
            (
                (
                    "0Ô∏è‚É£" * (width - len(str(num := num + 1)))
                )  # –°—Ç–∞–≤–∏–º –Ω—É–ª–∏ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º —á–∏—Å–ª–æ–º
                + "‚É£".join(str(num))  # –°–∞–º–æ —á–∏—Å–ª–æ
                + "‚É£"
                + line
                if not (line.startswith("-- ") or line.startswith("‚Äî "))
                else line.removeprefix("-- ").removeprefix("‚Äî ")
            )
            if line not in ("", "‚†Ä")
            else "‚†Ä"
            for line in lst
        )

    def List(_text: str):  # –ó–∞–º–µ–Ω—è–µ—Ç \n –Ω–∞ :black_small_square: (—ç–º–æ–¥–∑–∏ Telegram)
        _text = "‚ñ™Ô∏è" + _text
        for old, new in (
            ("\n", "\n‚ñ™Ô∏è"),
            ("\n‚ñ™Ô∏è‚†Ä\n", "\n‚†Ä\n"),
            ("‚ñ™Ô∏è-- ", ""),
            ("‚ñ™Ô∏è‚Äî ", ""),
        ):
            _text = _text.replace(old, new)
        return _text

    def Spoiler(_text: str):
        return f"<span class='tg-spoiler'>{_text}</span>"

    def SubUrls(_text: str):
        def la(url):
            return f"<a href='{url[0]}'>{urlparse(url[0]).netloc}</a>"

        return re.sub(r"(http?s?://[^\"\'\n ]+)", la, _text)  # r"(http?s?://\S+)"

    def Code(_text: str):
        return f"<pre>{_text}</pre>"

    # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r"\n(\n*)\n", "\n‚†Ä\n", text)

    if ("üîó" in statuses and "‚õì" not in statuses) or (
        sub_url and ("üíª" not in statuses and "‚õì" not in statuses)
    ):
        text = SubUrls(text)

    for status in statuses.split(","):
        if status == "üóí":
            text = List(text)
        if status == "üßÆ":
            text = OrderList(text)
        if status == "üíª":
            text = Code(text)
        if status == "ü™û":
            text = Spoiler(text)

    return text


class Cooldown:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
    MyCooldown = Cooldown(cooldown_time, {})
    MyCooldown.check(chat_id)
    """

    def __init__(self, cooldown_time_sec: int, cooldown_dict: dict):
        self._cooldown_time_sec = cooldown_time_sec
        self._cooldown_dict = cooldown_dict

    def check(self, key: Any, update_dict=True):
        """
        :param key: –ö–ª—é—á –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–ª–æ–≤–∞—Ä—å
        :param update_dict: –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
        –ï—Å–ª–∏ True —Ç–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º—è –±—É–¥–µ—Ç –æ–±–Ω—É–ª—è—Ç—å—Å—è
        :return: (bool, int(time_difference))
        """
        t1 = time()
        result = True, 0

        try:
            if (
                localtime := (t1 - self._cooldown_dict[str(key)])
            ) < self._cooldown_time_sec:
                result = (False, int(self._cooldown_time_sec - int(localtime)))
        except KeyError:
            pass

        if update_dict or result[0]:
            self._cooldown_dict[f"{key}"] = t1
        return result


def rate_limit_requests(requests_count: int = 3, time_sec: int = 60):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏,
    –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–∑—ã–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é —á–∞—â–µ —á–µ–º 3 —Ä–∞–∑–∞ –≤ 60 —Å–µ–∫—É–Ω–¥.
    """

    def decorator(func):
        cache = []

        def wrapper(*args, **kwargs):
            now = time()
            cache[:] = [call for call in cache if now - call < time_sec]
            if len(cache) >= requests_count:
                wait_time = time_sec - int(now - cache[0])
                return (
                    "–ü–æ–≥–æ–¥—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ...\n"
                    f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {wait_time} —Å–µ–∫—É–Ω–¥"
                )
            cache.append(now)
            return func(*args, **kwargs)

        return wrapper

    return decorator


def cache_with_ttl(cache_time_sec: int = 60):
    """
    –ö–µ—à–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–æ–±–Ω–æ functools.cache,
    –Ω–æ –¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –±–æ–ª—å—à–µ cache_time_sec.
    –ù–µ –¥–∞—ë—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏
    —Å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —á–∞—â–µ —á–µ–º –≤ cache_time_sec —Å–µ–∫—É–Ω–¥—ã.
    """

    def decorator(func):
        cache = {}

        def wrapper(settings: UserSettings, city: str):
            key = f"{city} {settings.lang}"
            now = time()
            if key not in cache or now - cache[key][1] > cache_time_sec:
                cache[key] = (func(settings, city), now)
            return cache[key][0]

        return wrapper

    return decorator


# TODO –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ api –∫–ª—é—á–∏ –¥–ª—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
# TODO –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ api –∫–ª—é—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# TODO –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ —Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
@rate_limit_requests(4, 60)
@cache_with_ttl(300)
def fetch_weather(settings: UserSettings, city: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –≥–æ—Ä–æ–¥—É city
    """
    logging.info(f"weather in {city}")
    url = "http://api.openweathermap.org/data/2.5/weather"
    weather = requests.get(
        url,
        params={
            "APPID": config.WEATHER_API_KEY,
            "q": city,
            "units": "metric",
            "lang": settings.lang,
        },
    ).json()
    weather_icon = weather["weather"][0]["icon"]
    dn = {"d": "‚òÄ", "n": "üåë"}
    we = {
        "01": "",
        "02": "üå§",
        "03": "üå•",
        "04": "‚òÅ",
        "09": "üå®",
        "10": "üåß",
        "11": "‚õà",
        "13": "‚ùÑ",
        "50": "üå´",
    }
    de = {
        0: "‚¨ÜÔ∏è",
        45: "‚ÜóÔ∏è",
        90: "‚û°Ô∏è",
        135: "‚ÜòÔ∏è",
        180: "‚¨áÔ∏è",
        225: "‚ÜôÔ∏è",
        270: "‚¨ÖÔ∏è",
        315: "‚ÜñÔ∏è",
    }

    try:
        weather_icon = dn[weather_icon[-1]] + we[weather_icon[:2]]
    except KeyError:
        weather_icon = weather["weather"][0]["main"]

    delta = timedelta(hours=weather["timezone"] // 60 // 60)
    city_name = weather["name"].capitalize()
    weather_description = (
        weather["weather"][0]["description"].capitalize().replace(" ", "\u00A0")
    )
    time_in_city = f"{datetime.now(timezone.utc)+delta}".replace("-", ".")[:-13]
    weather_time = f"{datetime.utcfromtimestamp(weather['dt'])+delta}".replace("-", ".")
    temp = int(weather["main"]["temp"])
    feels_like = int(weather["main"]["feels_like"])
    wind_speed = f"{weather['wind']['speed']:.1f}"
    wind_deg = weather["wind"]["deg"]
    wind_deg_icon = de[0 if (d := round(int(wind_deg) / 45) * 45) == 360 else d]
    sunrise = str(datetime.utcfromtimestamp(weather["sys"]["sunrise"]) + delta)
    sunrise = sunrise.split(" ")[-1]
    sunset = str(datetime.utcfromtimestamp(weather["sys"]["sunset"]) + delta)
    sunset = sunset.split(" ")[-1]
    visibility = weather["visibility"]

    return get_translate("weather", settings.lang).format(
        city_name,
        weather_icon,
        weather_description,
        time_in_city,
        weather_time,
        temp,
        feels_like,
        wind_speed,
        wind_deg_icon,
        wind_deg,
        sunrise,
        sunset,
        visibility,
    )


@rate_limit_requests(4, 60)
@cache_with_ttl(3600)
def fetch_forecast(settings: UserSettings, city: str) -> str:
    """
    –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ city
    """
    logging.info(f"forecast in {city}")
    url = "http://api.openweathermap.org/data/2.5/forecast"
    weather = requests.get(
        url,
        params={
            "APPID": config.WEATHER_API_KEY,
            "q": city,
            "units": "metric",
            "lang": settings.lang,
        },
    ).json()
    dn = {"d": "‚òÄ", "n": "üåë"}
    we = {
        "01": "",
        "02": "üå§",
        "03": "üå•",
        "04": "‚òÅ",
        "09": "üå®",
        "10": "üåß",
        "11": "‚õà",
        "13": "‚ùÑ",
        "50": "üå´",
    }
    de = {
        0: "‚¨ÜÔ∏è",
        45: "‚ÜóÔ∏è",
        90: "‚û°Ô∏è",
        135: "‚ÜòÔ∏è",
        180: "‚¨áÔ∏è",
        225: "‚ÜôÔ∏è",
        270: "‚¨ÖÔ∏è",
        315: "‚ÜñÔ∏è",
    }

    citytimezone = timedelta(hours=weather["city"]["timezone"] // 60 // 60)
    sunrise = str(
        datetime.utcfromtimestamp(weather["city"]["sunrise"]) + citytimezone
    ).split(" ")[-1]
    sunset = str(
        datetime.utcfromtimestamp(weather["city"]["sunset"]) + citytimezone
    ).split(" ")[-1]
    result = f"{weather['city']['name']}\n‚òÄ {sunrise}\nüåë {sunset}"

    for hour in weather["list"]:
        weather_icon = hour["weather"][0]["icon"]

        try:
            weather_icon = dn[weather_icon[-1]] + we[weather_icon[:2]]
        except KeyError:
            weather_icon = hour["weather"][0]["main"]

        weather_description = (
            hour["weather"][0]["description"].capitalize().replace(" ", "\u00A0")
        )
        temp = hour["main"]["temp"]
        wind_speed = hour["wind"]["speed"]
        wind_deg = hour["wind"]["deg"]
        wind_deg_icon = de[0 if (d := round(int(wind_deg) / 45) * 45) == 360 else d]
        city_time = hour["dt_txt"].replace("-", ".")[:-3]
        date = ".".join(city_time.split()[0].split(".")[::-1])
        if date not in result:
            day = DayInfo(settings, date)
            result += (
                f"\n\n<b>{date}</b> <u><i>{day.str_date}  "
                f"{day.week_date}</i></u> ({day.relatively_date})"
            )
        result += (
            f"\n{city_time.split()[-1]} {weather_icon}<b>{temp:‚†Ä>2.0f}¬∞C "
            f"üí®{wind_speed:.0f}–º/—Å {wind_deg_icon}</b> "
            f"<u>{weather_description}</u>."
        )
    return result

def is_secure_chat(message: Message):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏ —á–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.
    –ß–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º.
    """
    return is_admin_id(message.chat.id) and message.chat.type == "private"


def poke_link() -> None:
    logging.info(f"{config.LINK}")

    try:
        logging.info(f"{requests.get(config.LINK, headers=config.headers).status_code}")
    except MissingSchema as e:
        logging.info(f"{e}")
    except ConnectionError:
        logging.info("404")


def write_table_to_str(
    file: StringIO,
    table: list[tuple[str, ...], ...] = None,
    query: str = None,
    commit: bool = False,
    align: tuple[Literal["<", ">", "^"]] = "<",
) -> None:
    """
    –ù–∞–ø–æ–ª–Ω–∏—Ç —Ñ–∞–π–ª file —Å—Ç—Ä–æ–∫–æ–≤—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ SQL(query)
    """
    table = [
        list(str(column) for column in row)
        for row in (
            db.execute(query, commit=commit, column_names=True) if not table else table
        )
    ]

    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ 126 —Å–∏–º–≤–æ–ª–æ–≤ (—É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞)
    table = [
        [
            "\\n\n".join(
                textwrap(
                    column, width=126, replace_whitespace=False, drop_whitespace=True
                )
                or " "
            )
            for column in row
        ]
        for row in table
    ]

    # –ú–∞—Ç—Ä–∏—Ü–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –¥–ª–∏–Ω –∏ –≤—ã—Å–æ—Ç –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∏ —Å—Ç—Ä–æ–∫–∏
    w = [
        [max(len(line) for line in str(column).splitlines()) for column in row]
        for row in table
    ]

    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∏ —Å—Ç—Ä–æ–∫–∏
    widths = [max(column) for column in zip(*w)]

    sep = "+" + "".join(("-" * (i + 2)) + "+" for i in widths)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ç—Ä–æ–∫
    template = "|" + "".join(f" {{:{align}{_}}} |" for _ in widths)

    for n, row in enumerate(table):
        file.write(sep + "\n")

        # –ò–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        indices = [
            i for i, column in enumerate(row) if len(str(column).splitlines()) > 1
        ]

        if indices:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            first_line = row[:]
            for x in indices:
                first_line[x] = row[x].splitlines()[0]
            file.write(template.format(*first_line) + "\n")

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ
            indents = [len(str(column).splitlines()) for column in row]

            max_lines = max(indents)
            for ml in range(1, max_lines):  # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞–∫—Å–∏–º—É–º –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ—á–µ–∫
                new_line = ["" for _ in indents]
                for i in indices:  # –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —è—á–µ–µ–∫
                    try:
                        new_line[i] = str(row[i]).splitlines()[ml]
                    except IndexError:
                        pass
                file.write(
                    template.format(*new_line) + ("\n" if ml < max_lines - 1 else "")
                )

        else:
            file.write(template.format(*row))
        file.write("\n")
    file.write(sep)
    file.seek(0)

def check_user(func):
    def wrapper(x: Message | CallbackQuery):
        if isinstance(x, Message):
            chat_id = x.chat.id
        elif isinstance(x, CallbackQuery):
            chat_id = x.message.chat.id
            if x.data == "None":
                return 0
        else:
            return

        with db.connection(), db.cursor():
            user = User(chat_id)

            if user.settings.user_status == -1 and not is_admin_id(chat_id):
                return

            res = func(x, user)
        return res

    return wrapper
