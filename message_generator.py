from copy import deepcopy
from typing import Literal
from sqlite3 import Error
from datetime import datetime, timedelta

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

import logging
from bot import bot
from utils import markdown
from lang import get_translate
from sql_utils import sqlite_format_date, pagination
from time_utils import now_time_strftime, DayInfo
from todoapi.types import db, UserSettings, Event


class EventMessageGenerator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —à–∞–±–ª–æ–Ω—É
    """

    def __init__(
        self,
        settings: UserSettings,
        date: str = "now",
        event_list: tuple | list[Event, ...] = tuple(),
        reply_markup: InlineKeyboardMarkup = InlineKeyboardMarkup(),
    ):
        if date == "now":
            date = now_time_strftime(settings.timezone)
        self.event_list = event_list
        self._date = date
        self._settings = settings
        self.text = ""
        self.reply_markup = deepcopy(reply_markup)

    def get_data(
        self,
        *,
        WHERE: str,
        direction: Literal["ASC", "DESC"] = "DESC",
        prefix: str = "|",
    ):
        """
        –ü–æ–ª—É—á–∏—Ç—å [—Å–ø–∏—Å–æ–∫ (–∫–æ—Ä—Ç–µ–∂–µ–π '—Å—Ç—Ä–æ–∫ id',)] –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        """
        data = pagination(
            WHERE=WHERE,
            direction=direction,
        )
        if data:
            first_message = [
                Event(*event)
                for event in db.execute(
                    f"""
SELECT event_id,
       date,
       text,
       status,
       removal_time,
       adding_time,
       recent_changes_time
  FROM events
 WHERE event_id IN ({data[0]}) AND 
       ({WHERE}) 
 ORDER BY {sqlite_format_date("date")} {direction};
""",
                )
            ]

            if self._settings.direction == "ASC":
                first_message = first_message[::-1]
            self.event_list = first_message

            count_columns = 5
            diapason_list = []
            for num, d in enumerate(data):  # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
                if int(f"{num}"[-1]) in (0, count_columns):
                    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤ —Å—Ç—Ä–æ—á–∫–∏ –ø–æ 5
                    diapason_list.append([])
                diapason_list[-1].append((num + 1, d))  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, id

            if len(diapason_list[0]) != 1:  # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
                for i in range(count_columns - len(diapason_list[-1])):
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥—É –¥–æ 5
                    diapason_list[-1].append((0, 0))

                # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 8 —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫
                [
                    self.reply_markup.row(
                        *[
                            InlineKeyboardButton(
                                f"{numpage}", callback_data=f"{prefix}{numpage}|{vals}"
                            )
                            if vals
                            else InlineKeyboardButton(" ", callback_data="None")
                            for numpage, vals in row
                        ]
                    )
                    for row in diapason_list[:8]
                ]
        return self

    def get_events(self, WHERE: str, values: list | tuple[str]):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤—Ö–æ–¥—è—â–∏–µ –≤ values —Å —É—Å–ª–æ–≤–∏–µ–º WHERE
        """
        try:
            res = [
                Event(*event)
                for event in db.execute(
                    f"""
SELECT event_id,
       date,
       text,
       status,
       removal_time,
       adding_time,
       recent_changes_time
  FROM events
 WHERE event_id IN ({', '.join(values)}) AND 
       ({WHERE}) 
 ORDER BY {sqlite_format_date('date')} {self._settings.direction};
""",
                )
            ]
        except Error as e:
            logging.info(
                f'[message_generator.py -> MessageGenerator.get_events] Error "{e}"'
            )
            self.event_list = []
        else:
            if self._settings.direction == "ASC":
                res = res[::-1]
            self.event_list = res
        return self

    def format(
        self,
        title: str = "{date} <u><i>{strdate}  {weekday}</i></u> ({reldate})\n",
        args: str = "<b>{numd}.{event_id}.</b>{status}\n{markdown_text}\n",
        ending: str = "",
        if_empty: str = "üï∏üï∑  üï∏",
        **kwargs,
    ):
        """
        –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É
        \n ‚†Ä
        \n {date}     - Date                                                                       ["0000.00.00"]
        \n {strdate}  - String Date                                                                ["0 January"]
        \n {weekday} - Week Date                                                                   ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"]
        \n {reldate}  - Relatively Date                                                            ["–ó–∞–≤—Ç—Ä–∞"]
        \n ‚†Ä
        \n {numd}     - –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (—Ü–∏—Ñ–µ—Ä–Ω—ã–π)                                                ["1 2 3"]
        \n {nums}     - –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (—Å–º–∞–π–ª–∏–∫–∏)                                                ["1 2 3"]
        \n {event_id} - Event_id                                                                   ["1"]
        \n {status}   - Status                                                                     ["‚¨úÔ∏è"]
        \n {markdown_text} - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –Ω—É–∂–Ω—ã–π —Ç–µ–≥ –ø–æ —Å—Ç–∞—Ç—É—Å—É                             ["<b>"]
        \n {markdown_text_nourlsub} - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –Ω—É–∂–Ω—ã–π —Ç–µ–≥ –ø–æ —Å—Ç–∞—Ç—É—Å—É –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è url ["</b>"]
        \n {text}     - Text                                                                       ["text"]
        \n {days_before_delete} - –î–Ω–µ–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è

        :param title:    –ó–∞–≥–æ–ª–æ–≤–æ–∫
        :param args:     –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —à–∞–±–ª–æ–Ω
        :param ending:   –ö–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è
        :param if_empty: –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø—É—Å—Ç–æ–π
        :return:         message.text
        """

        def days_before_delete(event_deletion_date: str):
            if event_deletion_date == "0":
                return 30
            else:
                d1 = datetime.utcnow() + timedelta(
                    hours=self._settings.timezone
                )  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                d2 = datetime(*[int(i) for i in event_deletion_date.split("-")])

                return 30 - (d1 - d2).days

        day = DayInfo(self._settings, self._date)

        format_string = (
            title.format(
                date=day.date,
                strdate=day.str_date,
                weekday=day.week_date,
                reldate=day.relatively_date,
            )
            + "\n"
        )

        if not self.event_list:
            format_string += if_empty
        else:
            for num, event in enumerate(self.event_list):
                day = DayInfo(self._settings, event.date)
                format_string += (
                    args.format(
                        date=day.date,
                        strdate=day.str_date,
                        weekday=day.week_date,
                        reldate=day.relatively_date,
                        numd=f"{num + 1}",
                        nums=f"{num + 1}Ô∏è‚É£",  # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞ —Å —Ü–∏—Ñ—Ä–æ–π
                        event_id=f"{event.event_id}",
                        status=event.status,
                        markdown_text=markdown(
                            event.text, event.status, self._settings.sub_urls
                        ),
                        markdown_text_nourlsub=markdown(event.text, event.status),
                        days_before_delete=get_translate(
                            "deldate", self._settings.lang
                        )(days_before_delete(event.removal_time)),
                        **kwargs,
                        text=event.text,
                    )
                    + "\n"
                )

        self.text = (format_string + ending).strip()
        return self

    def send(self, chat_id: int) -> Message:
        return bot.send_message(
            chat_id=chat_id, text=self.text, reply_markup=self.reply_markup
        )

    def edit(
        self,
        chat_id: int,
        message_id: int,
        *,
        only_markup: bool = False,
        markup: InlineKeyboardMarkup = None,
    ) -> None:
        """
        :param chat_id: chat_id
        :param message_id: message_id
        :param only_markup: –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É self.reply_markup
        :param markup: –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç self.text –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ markup


        bot.edit_message_text(text, chat_id, message_id, reply_markup=self.reply_markup)

        .edit(chat_id, message_id, markup=markup)

        bot.edit_message_reply_markup(self.text, chat_id, message_id, reply_markup=markup)

        .edit(chat_id, message_id, only_markup=True)

        bot.edit_message_text(self.text, chat_id, message_id, reply_markup=self.reply_markup)

        .edit(chat_id, message_id)
        """
        if only_markup:
            bot.edit_message_reply_markup(
                chat_id=chat_id, message_id=message_id, reply_markup=self.reply_markup
            )
        elif markup is not None:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=self.text,
                reply_markup=markup,
            )
        else:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=self.text,
                reply_markup=self.reply_markup,
            )


class NoEventMessage:
    def __init__(
        self,
        text: str,
        reply_markup: InlineKeyboardMarkup = InlineKeyboardMarkup(),
    ):
        self.text = text
        self.reply_markup = reply_markup

    def send(self, chat_id: int) -> Message:
        return bot.send_message(
            chat_id=chat_id, text=self.text, reply_markup=self.reply_markup
        )

    def edit(
        self,
        chat_id: int,
        message_id: int,
        *,
        only_markup: bool = False,
        markup: InlineKeyboardMarkup = None,
    ) -> None:
        """
        :param chat_id: chat_id
        :param message_id: message_id
        :param only_markup: –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É self.reply_markup
        :param markup: –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç self.text –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ markup


        bot.edit_message_text(text, chat_id, message_id, reply_markup=self.reply_markup)

        .edit(chat_id, message_id, markup=markup)

        bot.edit_message_reply_markup(self.text, chat_id, message_id, reply_markup=markup)

        .edit(chat_id, message_id, only_markup=True)

        bot.edit_message_text(self.text, chat_id, message_id, reply_markup=self.reply_markup)

        .edit(chat_id, message_id)
        """
        if only_markup:
            bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=self.reply_markup,
            )
        elif markup is not None:
            bot.edit_message_text(
                text=self.text,
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=markup,
            )
        else:
            bot.edit_message_text(
                text=self.text,
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=self.reply_markup,
            )

    def reply(self, message):
        bot.reply_to(
            message,
            self.text,
            reply_markup=self.reply_markup,
        )

