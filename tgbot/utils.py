import re
import html
import difflib
import logging
from time import time
from io import StringIO
from typing import Literal
from functools import wraps
from urllib.parse import urlparse
from textwrap import wrap as textwrap
from datetime import timedelta, datetime, timezone

import requests
from requests import ConnectionError
from requests.exceptions import MissingSchema
from telebot.apihelper import ApiTelegramException
from telebot.types import Message

from tgbot import config
from tgbot.bot import bot
from tgbot.request import request
from tgbot.lang import get_translate
from tgbot.time_utils import DayInfo, convert_date_format, now_time
from todoapi.types import db, Event
from todoapi.utils import is_admin_id, isdigit

re_edit_message = re.compile(r"\A@\w{5,32} event\((\d+), (\d+)\)\.text(?:\n|\Z)")
msg_check = re.compile(
    rf"""(?xs)
\A
/                               # –ö–æ–º–∞–Ω–¥–∞
\w+                             # –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
(@{re.escape(bot.username)}\b)? # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π username –±–æ—Ç–∞
(\s|$)                          # –ü—Ä–æ–±–µ–ª –∏–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
.*                              # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
\Z
"""
)
re_call_data_date = re.compile(r"\A\d{1,2}\.\d{1,2}\.\d{4}\Z")
re_setuserstatus = re.compile(r"\A(-?\d+) (-1|0|1|2)\Z")


def markdown(text: str, statuses: str) -> str:
    """
    –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∫ —Å–æ–±—ã—Ç–∏—é –ø–æ —Å—Ç–∞—Ç—É—Å—É
    """

    def check_comment_in_status(comment_string: Literal["##", "//", "--"]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±—É–¥–µ—Ç –ª–∏ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å—á–∏—Ç–∞—Ç—å—Å—è –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–∞—Ö.
        """
        status_set = {
            s.removeprefix("üíª")
            for s in statuses_list
            if s.startswith("üíª")
        }

        if comment_string == "##":
            return not status_set.isdisjoint({"py", "re"})
        elif comment_string == "//":
            return not status_set.isdisjoint({"cpp", "c"})
        elif comment_string == "--":
            return not status_set.isdisjoint({"sql"})
        else:
            return False

    def is_comment_line(line: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ ("üóí") –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ("üßÆ").
        –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ —Å—Ç–æ–∏—Ç —è–∑—ã–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —ç—Ç–æ —á–∞—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞.
        """
        return line == "‚†Ä" or (
            line.startswith("‚Äî ")
            or (line.startswith("-- ") and not check_comment_in_status("--"))
            or (line.startswith("## ") and not check_comment_in_status("##"))
            or (line.startswith("// ") and not check_comment_in_status("//"))
        )

    def remove_comment_prefix(line: str) -> str:
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
        –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —É–¥–∞–ª—è–µ—Ç
        """
        line = line.removeprefix("‚Äî ")

        if not check_comment_in_status("--"):
            line = line.removeprefix("-- ")
        if not check_comment_in_status("##"):
            line = line.removeprefix("## ")
        if not check_comment_in_status("//"):
            line = line.removeprefix("// ")
        return line


    def format_order_list(_text: str, num=0) -> str:  # –ù—É–º–µ—Ä—É–µ—Ç –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ—á–∫—É
        lst = _text.splitlines()

        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç—Å—Ç—É–ø–∞ —á—Ç–æ–±—ã –Ω–µ —Å—ä–µ–∑–∂–∞–ª–æ
        width = len(
            str(
                len(
                    tuple(
                        line
                        for line in lst
                        if not is_comment_line(line)
                    )
                )
            )
        )

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ —á–∏—Å–ª–∞ + —Ç–µ–∫—Å—Ç, –∞ –µ—Å–ª–∏ –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ —Ç–æ "‚†Ä"
        return "\n".join(
            (
                (
                    "0Ô∏è‚É£" * (width - len(str(num := num + 1)))
                )  # –°—Ç–∞–≤–∏–º –Ω—É–ª–∏ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º —á–∏—Å–ª–æ–º
                + "‚É£".join(str(num))  # –°–∞–º–æ —á–∏—Å–ª–æ
                + "‚É£"
                + line
                if not is_comment_line(line)
                else remove_comment_prefix(line)
            )
            if line not in ("", "‚†Ä")
            else "‚†Ä"
            for line in lst
        )

    def format_list(_text: str):
        """–ó–∞–º–µ–Ω—è–µ—Ç \n –Ω–∞ :black_small_square: (—ç–º–æ–¥–∑–∏ Telegram)"""
        point = "‚ñ´Ô∏è" if request.user.settings.theme == 1 else "‚ñ™Ô∏è"
        big_point = "‚óªÔ∏è" if request.user.settings.theme == 1 else "‚óºÔ∏è"
        lst = _text.splitlines()

        return "\n".join(
            (
                (
                    (big_point if line.startswith("!!") else point) + line.removeprefix("!!")
                )
                if not is_comment_line(line)
                else remove_comment_prefix(line)
            )
            if line not in ("", "‚†Ä")
            else "‚†Ä"
            for line in lst
        )

    def format_spoiler(spoiler: str):
        return f"<span class='tg-spoiler'>{spoiler}</span>"

    def sub_urls(_text: str):
        def la(m: re.Match):
            url = re.sub(r"\Ahttp://", "https://", m[0])

            if re.search(r"https://t\.me/\w{5,32}", url):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return f"<a href='{url}'>@{url.removeprefix('https://t.me/')}</a>"

            return f"<a href='{url}'>{urlparse(url).netloc}</a>"

        return re.sub(r"(http?s?://[^\"\'\n ]+)", la, _text)  # r"(http?s?://\S+)"

    def format_code(code: str):
        return f"<pre>{code}</pre>"

    def format_code_lang(code: str, lang: str) -> str:
        return f"<pre><code class='language-{lang}'>{code}</code></pre>"

    text = html.escape(text)

    # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r"\n(\n*)\n", "\n‚†Ä\n", text)  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–∏–º–≤–æ–ª chr(10240)

    if ("üîó" in statuses and "‚õì" not in statuses) or (
        request.user.settings.sub_urls and ("üíª" not in statuses and "‚õì" not in statuses)
    ):
        text = sub_urls(text)

    statuses_list: list[str] = statuses.split(",")

    if "üóí" in statuses_list:
        text = format_list(text)
    elif "üßÆ" in statuses_list:
        text = format_order_list(text)

    if "üíª" in statuses:
        status = [
            status.removeprefix("üíª")
            for status in statuses_list
            if status.startswith("üíª")
        ][-1]
        text = format_code_lang(text, status) if status else format_code(text)
    elif "ü™û" in statuses_list:
        text = format_spoiler(text)

    return text


def rate_limit_requests(
    requests_count: int = 3,
    time_sec: int = 60,
    key_path: int | str | tuple[str | int] | set[str | int] = None,
    translate_key: str = "errors.many_attempts",
    send: bool = False,
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏,
    –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–∑—ã–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é —á–∞—â–µ —á–µ–º 3 —Ä–∞–∑–∞ –≤ 60 —Å–µ–∫—É–Ω–¥.
    """

    def get_key(
        _args: tuple,
        _kwargs: dict,
        path: int | str | tuple[str | int] | list[str | int] = None,
    ):
        if path is None:
            path = key_path

        if isinstance(path, int):
            return _args[path]
        elif isinstance(path, str):
            result = None
            for i, a in enumerate(path.split(".")):
                a: str
                if i == 0:
                    result = _kwargs.get(a) or _args[0]
                else:
                    result = result[int(a)] if isdigit(a) else getattr(result, a)
            return result

        elif isinstance(path, (tuple, list)):
            return tuple(get_key(_args, _kwargs, key) for key in path)
        elif isinstance(path, set):
            keys = []
            for key in path:
                try:
                    x = get_key(_args, _kwargs, key)
                    keys.append(x)
                except AttributeError:
                    pass

            return " ".join(f"{key}" for key in keys)

    def decorator(func):
        cache = [] if key_path is None else {}

        @wraps(func)
        def wrapper(*args, **kwargs):
            now = time()
            key = get_key(args, kwargs)

            if key not in cache and key_path is not None:
                cache[key] = []

            _cache = cache if key_path is None else cache[key]
            _cache[:] = [call for call in _cache if now - call < time_sec]

            if len(_cache) >= requests_count:
                wait_time = time_sec - int(now - _cache[0])

                raw_text: str = get_translate(translate_key)
                text = raw_text.format(wait_time)
                if send:
                    try:
                        return bot.send_message(key, text)
                    except ApiTelegramException:
                        return
                else:
                    return text

            _cache.append(now)
            return func(*args, **kwargs)

        return wrapper

    return decorator


def cache_with_ttl(cache_time_sec: int = 60):
    """
    –ö–µ—à–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–æ–±–Ω–æ functools.cache,
    –Ω–æ –¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –±–æ–ª—å—à–µ cache_time_sec.
    –ù–µ –¥–∞—ë—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏
    —Å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —á–∞—â–µ —á–µ–º –≤ cache_time_sec —Å–µ–∫—É–Ω–¥—ã.
    """

    def decorator(func):
        cache = {}

        @wraps(func)
        def wrapper(city: str):
            key = f"{city} {request.user.settings.lang}"
            now = time()
            if key not in cache or now - cache[key][1] > cache_time_sec:
                cache[key] = (func(city), now)
            return cache[key][0]

        return wrapper

    return decorator


# TODO –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ api –∫–ª—é—á–∏ –¥–ª—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
# TODO –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ api –∫–ª—é—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# TODO –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ —Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
@rate_limit_requests(4, 60, translate_key="errors.many_attempts_weather")
@cache_with_ttl(300)
def fetch_weather(city: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –≥–æ—Ä–æ–¥—É city
    """
    logging.info(f"weather in {city}")
    url = "http://api.openweathermap.org/data/2.5/weather"
    weather = requests.get(
        url,
        params={
            "APPID": config.WEATHER_API_KEY,
            "q": city,
            "units": "metric",
            "lang": request.user.settings.lang,
        },
    ).json()
    weather_icon = weather["weather"][0]["icon"]
    dn = {"d": "‚òÄ", "n": "üåë"}
    we = {
        "01": "",
        "02": "üå§",
        "03": "üå•",
        "04": "‚òÅ",
        "09": "üå®",
        "10": "üåß",
        "11": "‚õà",
        "13": "‚ùÑ",
        "50": "üå´",
    }
    de = {
        0: "‚¨ÜÔ∏è",
        45: "‚ÜóÔ∏è",
        90: "‚û°Ô∏è",
        135: "‚ÜòÔ∏è",
        180: "‚¨áÔ∏è",
        225: "‚ÜôÔ∏è",
        270: "‚¨ÖÔ∏è",
        315: "‚ÜñÔ∏è",
    }

    try:
        weather_icon = dn[weather_icon[-1]] + we[weather_icon[:2]]
    except KeyError:
        weather_icon = weather["weather"][0]["main"]

    delta = timedelta(hours=weather["timezone"] // 60 // 60)
    city_name = weather["name"].capitalize()
    weather_description = (
        weather["weather"][0]["description"].capitalize().replace(" ", "\u00A0")
    )
    time_in_city = f"{datetime.now(timezone.utc)+delta}".replace("-", ".")[:-13]
    weather_time = f"{datetime.utcfromtimestamp(weather['dt'])+delta}".replace("-", ".")
    temp = int(weather["main"]["temp"])
    feels_like = int(weather["main"]["feels_like"])
    wind_speed = f"{weather['wind']['speed']:.1f}"
    wind_deg = weather["wind"]["deg"]
    wind_deg_icon = de[0 if (d := round(int(wind_deg) / 45) * 45) == 360 else d]
    sunrise = str(datetime.utcfromtimestamp(weather["sys"]["sunrise"]) + delta)
    sunrise = sunrise.split(" ")[-1]
    sunset = str(datetime.utcfromtimestamp(weather["sys"]["sunset"]) + delta)
    sunset = sunset.split(" ")[-1]
    visibility = weather["visibility"]

    return get_translate("messages.weather").format(
        city_name,
        weather_icon,
        weather_description,
        time_in_city,
        weather_time,
        temp,
        feels_like,
        wind_speed,
        wind_deg_icon,
        wind_deg,
        sunrise,
        sunset,
        visibility,
    )


@rate_limit_requests(4, 60, translate_key="errors.many_attempts_weather")
@cache_with_ttl(3600)
def fetch_forecast(city: str) -> str:
    """
    –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ city
    """
    logging.info(f"forecast in {city}")
    url = "http://api.openweathermap.org/data/2.5/forecast"
    weather = requests.get(
        url,
        params={
            "APPID": config.WEATHER_API_KEY,
            "q": city,
            "units": "metric",
            "lang": request.user.settings.lang,
        },
    ).json()
    dn = {"d": "‚òÄ", "n": "üåë"}
    we = {
        "01": "",
        "02": "üå§",
        "03": "üå•",
        "04": "‚òÅ",
        "09": "üå®",
        "10": "üåß",
        "11": "‚õà",
        "13": "‚ùÑ",
        "50": "üå´",
    }
    de = {
        0: "‚¨ÜÔ∏è",
        45: "‚ÜóÔ∏è",
        90: "‚û°Ô∏è",
        135: "‚ÜòÔ∏è",
        180: "‚¨áÔ∏è",
        225: "‚ÜôÔ∏è",
        270: "‚¨ÖÔ∏è",
        315: "‚ÜñÔ∏è",
    }

    city_timezone = timedelta(hours=weather["city"]["timezone"] // 60 // 60)
    sunrise = datetime.utcfromtimestamp(weather["city"]["sunrise"]) + city_timezone
    sunset = datetime.utcfromtimestamp(weather["city"]["sunset"]) + city_timezone
    result = f"{weather['city']['name']}\n‚òÄ {sunrise}\nüåë {sunset}"

    for hour in weather["list"]:
        weather_icon = hour["weather"][0]["icon"]

        try:
            weather_icon = dn[weather_icon[-1]] + we[weather_icon[:2]]
        except KeyError:
            weather_icon = hour["weather"][0]["main"]

        weather_description = (
            hour["weather"][0]["description"].capitalize().replace(" ", "\u00A0")
        )
        temp = hour["main"]["temp"]
        wind_speed = hour["wind"]["speed"]
        wind_deg = hour["wind"]["deg"]
        wind_deg_icon = de[0 if (d := round(int(wind_deg) / 45) * 45) == 360 else d]
        city_time = hour["dt_txt"].replace("-", ".")[:-3]
        date = ".".join(city_time.split()[0].split(".")[::-1])
        if date not in result:
            day = DayInfo(date)
            result += (
                f"\n\n<b>{date}</b> <u><i>{day.str_date}  "
                f"{day.week_date}</i></u> ({day.relatively_date})"
            )
        result += (
            f"\n{city_time.split()[-1]} {weather_icon}<b>{temp:‚†Ä>2.0f}¬∞C "
            f"üí®{wind_speed:.0f}–º/—Å {wind_deg_icon}</b> "
            f"<u>{weather_description}</u>."
        )
    return result


def is_secure_chat(message: Message):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏ —á–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.
    –ß–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º.
    """
    return is_admin_id(message.chat.id) and message.chat.type == "private"


def poke_link() -> None:
    try:
        requests.get(config.LINK, headers=config.headers)
    except MissingSchema as e:
        logging.error(f"{e}")
    except ConnectionError:
        logging.error("404")


def write_table_to_str(
    file: StringIO,
    table: list[tuple[str, ...], ...] = None,
    query: str = None,
    commit: bool = False,
    align: tuple[Literal["<", ">", "^"]] = "<",
) -> None:
    """
    –ù–∞–ø–æ–ª–Ω–∏—Ç —Ñ–∞–π–ª file —Å—Ç—Ä–æ–∫–æ–≤—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ SQL(query)
    """
    if not table:
        table = [
            [str(column) for column in row]
            for row in db.execute(query, commit=commit, column_names=True)
        ]

    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ 126 —Å–∏–º–≤–æ–ª–æ–≤ (—É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞)
    table = [
        [
            "\n".join(
                " \\\n".join(
                    textwrap(
                        line, width=126, replace_whitespace=False, drop_whitespace=True
                    )
                    or " "
                )
                for line in column.splitlines()
            )
            for column in row
        ]
        for row in table
    ]

    # –ú–∞—Ç—Ä–∏—Ü–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –¥–ª–∏–Ω –∏ –≤—ã—Å–æ—Ç –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∏ —Å—Ç—Ä–æ–∫–∏
    w = [
        [max(len(line) for line in str(column).splitlines()) for column in row]
        for row in table
    ]

    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∏ —Å—Ç—Ä–æ–∫–∏
    widths = [max(column) for column in zip(*w)]

    sep = "+" + "".join(("-" * (i + 2)) + "+" for i in widths)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ç—Ä–æ–∫
    template = "|" + "".join(f" {{:{align}{_}}} |" for _ in widths)

    for n, row in enumerate(table):
        file.write(sep + "\n")

        # –ò–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        indices = [
            i for i, column in enumerate(row) if len(str(column).splitlines()) > 1
        ]

        if indices:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            first_line = row[:]
            for x in indices:
                first_line[x] = row[x].splitlines()[0]
            file.write(template.format(*first_line) + "\n")

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ
            indents = [len(str(column).splitlines()) for column in row]

            max_lines = max(indents)
            for ml in range(1, max_lines):  # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞–∫—Å–∏–º—É–º –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ—á–µ–∫
                new_line = ["" for _ in indents]
                for i in indices:  # –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —è—á–µ–µ–∫
                    try:
                        new_line[i] = str(row[i]).splitlines()[ml]
                    except IndexError:
                        pass
                file.write(
                    template.format(*new_line) + ("\n" if ml < max_lines - 1 else "")
                )

        else:
            file.write(template.format(*row))
        file.write("\n")
    file.write(sep)
    file.seek(0)


def highlight_text_difference(_old_text, _new_text):
    sequence_matcher = difflib.SequenceMatcher(None, _old_text, _new_text)
    opcodes = sequence_matcher.get_opcodes()

    result_parts = []
    for opcode, i1, i2, j1, j2 in opcodes:
        if opcode in ("insert", "replace"):
            result_parts.append(f"<u>{_new_text[j1:j2]}</u>")
        elif opcode == "equal":
            result_parts.append(_new_text[j1:j2])

    result_text = "".join(result_parts)
    return result_text


def parse_message(text: str) -> list[Event]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
    """
    event_list: list[Event] = []
    msg_date = None

    if m := re.match(r"\A\d{2}\.\d{2}\.\d{4}", text):
        msg_date = m[0]

    for str_event in text.split("\n\n")[1:]:
        if m := re.match(
            r"\A(\d{2}\.\d{2}\.\d{4})\.(\d+)\.(\S{1,3}(?:,\S{1,3}){0,4}) ", str_event
        ):
            event_date, event_id, event_status = m[1], m[2], m[3]
        elif m := re.match(
            r"\A(10|[1-9])\.(\d+)\.(\S{1,3}(?:,\S{1,3}){0,4})", str_event
        ):
            event_date, event_id, event_status = msg_date, m[2], m[3]
        else:
            continue

        event_list.append(
            Event(
                event_id=event_id,
                date=event_date,
                text=str_event.split("\n", maxsplit=1)[1],
                status=event_status,
            )
        )

    return event_list


def days_before_event(event_date: str, event_status: str) -> tuple[int, str, str]:
    """
    –í —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ.
    :return: ('—Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö', '–¥–∞—Ç–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è', '—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã')
    """
    _date = convert_date_format(event_date)
    now_t = now_time()
    dates = []

    # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
    if "üì¨" in event_status:
        day = DayInfo(f"{now_t:%d.%m.%Y}")
        return day.day_diff, day.date, day.relatively_date

    # –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
    if "üóû" in event_status:
        now_wd, event_wd = now_t.weekday(), _date.weekday()
        next_date = now_t + timedelta(days=(event_wd - now_wd + 7) % 7)
        dates.append(next_date)

    # –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü
    elif "üìÖ" in event_status:
        day = DayInfo(f"{_date:%d}.{now_t:%m.%Y}")
        month, year = day.datetime.month, day.datetime.year
        if day.day_diff >= 0:
            dates.append(day.datetime)
        else:
            if month < 12:
                dates.append(day.datetime.replace(month=month + 1))
            else:
                dates.append(day.datetime.replace(year=year + 1, month=1))

    # –ö–∞–∂–¥—ã–π –≥–æ–¥
    elif {*event_status.split(",")}.intersection({"üìÜ", "üéâ", "üéä"}):
        day = DayInfo(f"{_date:%d.%m}.{now_t:%Y}")
        if day.datetime.date() < now_t.date():
            dates.append(day.datetime.replace(year=now_t.year + 1))
        else:
            dates.append(day.datetime.replace(year=now_t.year))

    else:
        day = DayInfo(event_date)
        return day.day_diff, day.date, day.relatively_date

    day = DayInfo(f"{min(dates):%d.%m.%Y}")
    return day.day_diff, day.date, day.relatively_date
